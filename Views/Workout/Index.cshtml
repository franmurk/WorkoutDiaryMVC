@model WorkoutDiaryMVC.Models.DashboardViewModel

@{
    ViewData["Title"] = "Workout Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="fw-bold mb-0">Workout Dashboard</h2>

    <div class="d-flex gap-2">
        <a href="/Workout/Create" class="btn btn-primary d-flex align-items-center gap-1">
            <span class="fs-5">+</span> Add Workout
        </a>

        <a href="/Export/Pdf" class="btn btn-primary d-flex align-items-center gap-1">
            <span class="fs-5">⬇</span> Export to PDF
        </a>
    </div>
</div>


<div class="row row-cols-1 row-cols-md-2 g-3 mb-4">

    <!-- Box 1: Stat card -->
    <div class="col">
        <div class="card shadow-sm h-100">
            <div class="card-body">
                <h6 class="text-muted mb-1">Total Workouts</h6>
                <h3 class="fw-bold">@ViewData["WorkoutCount"]</h3>
                <p class="text-muted mb-0">Completed training sessions </p>
            </div>
        </div>
    </div>

    <!-- Box 2: Clickable Personal Best card -->
    <div class="col">
        <a href="/PersonalBest/Records" class="text-decoration-none text-dark">
            <div class="card card-clickable shadow-sm h-100 d-flex align-items-center justify-content-center py-4">
                <div class="text-center">
                    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="#f0ad4e" viewBox="0 0 24 24">
                        <path d="M17 4V2H7v2H2v2a7 7 0 0 0 5 6.71V14a3 3 0 0 0 3 3h1v2H8v2h8v-2h-3v-2h1a3 3 0 0 0 3-3v-1.29A7 7 0 0 0 22 6V4Zm-2 10a1 1 0 0 1-1 1H10a1 1 0 0 1-1-1v-1.06a7 7 0 0 0 6 0Zm5-8v.14a5 5 0 0 1-3 4.5V6h3Zm-16 0h3v4.64a5 5 0 0 1-3-4.5Z" />
                    </svg>
                    <p class="fw-bold mb-0 mt-2">Personal Best</p>
                    <p class="text-muted small mb-0">Track your personal records</p>
                </div>
            </div>
        </a>
    </div>
    <!-- Box 3: Total Duration -->
    <div class="col">
        <div class="card shadow-sm h-100">
            <div class="card-body">
                <h6 class="text-muted mb-1">Total Time</h6>
                <h3 class="fw-bold">@ViewData["TotalDuration"] min</h3>
                <p class="text-muted mb-0">Total duration of all workouts</p>
            </div>
        </div>
    </div>

    <!-- Box 4: Average Duration -->
    <div class="col">
        <div class="card shadow-sm h-100">
            <div class="card-body">
                <h6 class="text-muted mb-1">Avg. Duration</h6>
                <h3 class="fw-bold">@ViewData["AverageDuration"] min</h3>
                <p class="text-muted mb-0">Average workout duration</p>
            </div>
        </div>
    </div>
</div>


<!-- Workout Types Chart Card -->
<div class="card mb-5 shadow-sm">
    <div class="card-body">
        <h4 class="card-title mb-4 fw-bold fs-3 text-start">Workout Types Distribution</h4>
        <div style="max-width: 300px; margin: 0 auto;">
            <canvas id="typeChart"></canvas>
        </div>
    </div>
</div>


<div class="d-flex justify-content-between align-items-center mb-3">
    <h3 class="fw-bold fs-3 mb-0">Upcoming Workouts</h3>
    <a href="/Workout/Calendar" class="text-decoration-none fw-bold">
        View Calendar <span class="ms-1">&rarr;</span>
    </a>
</div>

@if (Model.UpcomingWorkouts.Any())
{
    <div class="row">
        @foreach (var w in Model.UpcomingWorkouts)
        {
            <div class="col-md-6 col-lg-4">
                @await Html.PartialAsync("~/Views/Shared/_WorkoutCard.cshtml", w)
            </div>
        }
    </div>
}
else
{
    <div class="bg-light rounded-3 p-5 text-center mb-5 shadow-sm">
        <h5 class="fw-bold mb-2">No Upcoming Workouts</h5>
        <p class="mb-4">Plan your next workout to stay on track with your fitness goals.</p>
        <a href="/Workout/Create" class="btn btn-primary px-4">Schedule a Workout</a>
    </div>
}


<h3 class="h5 mt-5 mb-3 fw-bold fs-3">Recent Workouts</h3>
<div class="row">
    @foreach (var w in Model.RecentWorkouts)
    {
        <div class="col-md-6 col-lg-4">
            @await Html.PartialAsync("~/Views/Shared/_WorkoutCard.cshtml", w)
        </div>
    }
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const chartData = {
            labels: [],
            datasets: [{
                label: 'Workout Types',
                data: [],
                backgroundColor: []
            }]
        };

        @if (ViewData["WorkoutTypes"] is IEnumerable<dynamic> types)
        {
                var colorMap = new Dictionary<string, string>
                {
                        { "cardio", "#007bff" },
                        { "strength", "#dc3545" },
                        { "flexibility", "#28a745" }
                };

                foreach (var t in types)
                {
                        var typeLower = t.Type?.ToString().ToLower() ?? "other";
                        var color = colorMap.ContainsKey(typeLower) ? colorMap[typeLower] : "#6f42c1"; // Other

                        <text>
                            chartData.labels.push('@t.Type');
                            chartData.datasets[0].data.push(@t.Count);
                            chartData.datasets[0].backgroundColor.push('@color');
                        </text>
                }
        }

        const ctx = document.getElementById('typeChart').getContext('2d');
        new Chart(ctx, {
            type: 'pie',
            data: chartData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
    </script>
}


